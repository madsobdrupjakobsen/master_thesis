2-2
1/exp(15)
1/(1+exp(15))
1/(1+exp(16))
1/(1+exp(20))
setwd("~/Dropbox/Skole/DTU/Studie/MASTER/master_thesis/modelling")
library('ctsmr')
library(latex2exp)
library(boot)
source('./src/tools.R')
source("./src/yum_tools.R")
source('./src/prep.R')
##-----------------------------------------------------------------
# MODEL 1
## -------------- -------------- -------------- --------------
model_dir = 'model_1'
source(paste0("./",model_dir,"/model.R"))
source(paste0("./",model_dir,"/setprm.R"))
# Simulate based on initial parameter values
sim = simulate(makefit(setprm(model())), newdata=ice_data)
par(mfrow = c(1,1))
plot(ice_data$CompCap, type = "b",ylim = c(0,1))
lines(sim$output$sim$CompCap, type = "l",col = "red")
# Construct a model with initial values
mod_man = model()
setprm(mod_man)
fit_manual <- list()
fit_manual$model <- mod_man
fit_manual$xm <- mod_man$ParameterValues$initial
names(fit_manual$xm) = row.names(mod_man$ParameterValues)
##-----------------------------------------------------------------
# Prepare model for nlminb
model = model()
setprm(model)
## Fit with nlminb
model$AnalyseModel()
## Make a fit object to pass to simulate.ctsmr
fit <- list()
fit$model <- model
fit$xm <- model$ParameterValues$initial
fit$lower <- model$ParameterValues$lower
fit$upper <- model$ParameterValues$upper
names(fit$xm) <- row.names(model$ParameterValues)
names(fit$lower) <- row.names(model$ParameterValues)
names(fit$upper) <- row.names(model$ParameterValues)
## Can be nessary such that xm has the right length
class(fit) <- "ctsmr"
## The likelihood of the initial parameters set in fit
nllikelihood(fit$xm[model$pars], fit, D=ice_data, firstorder=TRUE, c=3, n.ahead=1,printit = FALSE)
## Fit with ctsmr
fitctsmr <- model$estimate(ice_data, firstorder=TRUE)
## Fit with nlminb
fitnlminb <- nlminb(fit$xm[model$pars], nllikelihood, fit=fit, D=ice_data, firstorder=TRUE, c=3, n.ahead=1,
control=list(iter.max=400), lower = fit$lower[model$pars], upper = fit$upper[model$pars])
## Plot the simulated output from the two estimated models
## ctsmr
(fitCtsmr <- insert_xm(fit, fitctsmr$xm))
simCtsmr <- simulate(fitCtsmr, newdata=ice_data)
## nlminb
(fitNlminb <- insert_xm(fit, fitnlminb$par))
simNlminb <- simulate(fitCtsmr, newdata=ice_data)
## manual
(fitManual <- insert_xm(fit, fit_manual$xm))
simManual <- simulate(fitManual, newdata=ice_data)
##-----------------------------------------------------------------
## EVALUATE MODELS
## -------------- -------------- -------------- --------------
plot(ice_data$t, ice_data$CompCap, type="l", ylab="Heat power (kW)")
lines(ice_data$t, simCtsmr$output$sim$CompCap, type="l", col=2)
lines(ice_data$t, simNlminb$output$sim$CompCap, type="l", col=3)
#### RESIDUAL ANALYSIS
res = ice_data$CompCap - simNlminb$output$sim$CompCap
plot(res)
diagtool(res)
lags = seq(1,20)
ldf_vals = ldf(res,lags,nBoot=30,plotIt=FALSE,plotFits=TRUE)
val = ldf_vals$val
lags = seq(1,20)
ldf_vals = ldf(res,lags,nBoot=30,plotIt=FALSE,plotFits=TRUE)
source('./src/ldf.R')
source('./src/leaveOneOut.R')
val = ldf_vals$val
lags = seq(1,20)
ldf_vals = ldf(res,lags,nBoot=30,plotIt=FALSE,plotFits=TRUE)
val = ldf_vals$val
iidVal = ldf_vals$iidVal
plot(c(0,lags), c(1,val), type="n", ylim=c(-1,1), ylab="LDF", main="Lag Dependence Functions", xaxt="n", xlab="lag")
axis(1,c(0,lags))
abline(0,0,col="gray")
lines(c(0,lags), c(1,val), type="h")
## Draw the approximate 95% confidence interval
abline(h=quantile(iidVal,0.95), col="blue", lty=2)
plot(c(0,lags), c(1,val), type="n", ylim=c(-1,1), ylab="LDF", main="Lag Dependence Functions", xaxt="n", xlab="lag")
axis(1,c(0,lags))
abline(0,0,col="gray")
lines(c(0,lags), c(1,val), type="h")
## Draw the approximate 95% confidence interval
abline(h=quantile(iidVal,0.95), col="blue", lty=2)
t
ice_data
##-----------------------------------------------------------------
## Read data
dataFull = read.csv2('./data/high_tc_20190913.csv', fileEncoding="latin1")
N = dim(dataFull)[1]
set.seed(144257)
# Subsampling
nSkip = 100
Idx = seq(1,N,nSkip)
data = dataFull #dataFull[Idx,]
n = dim(data)[1]
dataFull
dataFull$Time
dataFull[1]
dataFull[1]$Time
dataFull$Time[1]
dataFull$Time[101]
n
View(data)
View(data)
data
data$Time
data$Time[7755]
data$Time$time[7755]
data$Time[7755]
setwd("~/Dropbox/Skole/DTU/Studie/MASTER/master_thesis/modelling")
library('ctsmr')
library(latex2exp)
library(boot)
source('./src/tools.R')
source('./src/ldf.R')
source('./src/leaveOneOut.R')
source("./src/yum_tools.R")
source('./src/prep.R')
# New subsetting
# Subsampling
nSkip = 50
Idx = seq(1,N,nSkip)
ice_data = ice_data_full[Idx,]
##-----------------------------------------------------------------
# MODEL 3 - Results changes with p11 = -12 and p11 = =-2 as initial. Best with -2
## -------------- -------------- -------------- --------------
model_dir = 'model_3'
source(paste0("./",model_dir,"/model.R"))
source(paste0("./",model_dir,"/setprm.R"))
# Simulate based on initial parameter values
sim = simulate(makefit(setprm(model())), newdata=ice_data)
par(mfrow = c(1,1))
plot(ice_data$CompCap, type = "b",ylim = c(0,1))
lines(sim$output$sim$CompCap, type = "l",col = "red")
##-----------------------------------------------------------------
# Prepare models
fit_and_models = buildModels(model())
fit = fit_and_models$fit
model = fit_and_models$model
mod_man = fit_and_models$mod_man
## The likelihood of the initial parameters set in fit
nllikelihood(fit$xm[model$pars], fit, D=ice_data, firstorder=TRUE, c=3, n.ahead=1,printit = FALSE)
## Fit with ctsmr
model$options$maxNumberOfEval = 1000
fitctsmr <- model$estimate(ice_data, firstorder=TRUE)
## Fit with nlminb
fitnlminb <- nlminb(fit$xm[model$pars], nllikelihood, fit=fit, D=ice_data, firstorder=TRUE, c=3, n.ahead=1,
control=list(iter.max=400), lower = fit$lower[model$pars], upper = fit$upper[model$pars])
val
fitnlminb
fitctsmr
fitctsmr$loglik
fitnlminb$objective
# UNCERTAINTY
hessObjNlminb = finiteDiffHessian2(fitnlminb$par,fit,r = 40)
summary(fitctsmr)
summary(fitctsmr,extended=True)
summary(fitctsmr,extended=TRUE)
summary(fitctsmr)
fitctsmr$loglik
fitnlminb$objective
# Confidence intervals - ctmsr
c(exp(fitctsmr$xm['p11']),exp(fitctsmr$xm['p11'] +  c(-1,1) * fitctsmr$sd['p11']))
c(exp(fitctsmr$xm['p22']),exp(fitctsmr$xm['p22'] +  c(-1,1) * fitctsmr$sd['p22']))
c(exp(fitctsmr$xm['p33']),exp(fitctsmr$xm['p33'] +  c(-1,1) * fitctsmr$sd['p33']))
c(exp(fitctsmr$xm['e11']),exp(fitctsmr$xm['e11'] +  c(-1,1) * fitctsmr$sd['e11']))
sqrt(c(exp(fitctsmr$xm['e11']),exp(fitctsmr$xm['e11'] +  c(-1,1) * fitctsmr$sd['e11'])))
fitnlminb$par['p11']
exp(fitnlminb$par['p11'])
exp(fitnlminb$par['p22'])
exp(fitnlminb$par['p33'])
sqrt(exp(fitnlminb$par['e11']))
exp(fitnlminb$par['e11'])
sqrt(exp(fitnlminb$par['e11']))
aummary(fitctsmr)
summary(fitctsmr)
fitnlminb$par
## nlminb
(fitNlminb <- insert_xm(fit, fitnlminb$par))
simNlminb <- simulate(fitNlminb, newdata=ice_data)
#### RESIDUAL ANALYSIS
res = ice_data$CompCap - simNlminb$output$sim$CompCap
plot(res)
diagtool(res)
plot(res)
#### RESIDUAL ANALYSIS
res = ice_data$CompCap - simNlminb$output$sim$CompCap
plot(res)
plot(simNlminb$output$sim$CompCap)
plot(ice_data$CompCap, type = "b",ylim = c(0.4,1))
lines(simNlminb$output$sim,type = "l", col = 'red')
lines(simNlminStoch$output$CompCap,type = "l", col = 'green')
simNlminb$output$sim
#### RESIDUAL ANALYSIS
res = ice_data$CompCap - simNlminb$output$sim$CompCap
res
max(res)
plot(res)
min(res)
plot(res type = "l")
plot(res, type = "l")
plot(ice_data$CompCap, type = "b",ylim = c(0.4,1))
lines(simNlminb$output$sim,type = "l", col = 'red')
lags = seq(1,20)
ldf_vals = ldf(res,lags,nBoot=30,plotIt=FALSE,plotFits=TRUE)
val = ldf_vals$val
iidVal = ldf_vals$iidVal
plot(c(0,lags), c(1,val), type="n", ylim=c(-1,1), ylab="LDF", main="Lag Dependence Functions", xaxt="n", xlab="lag")
axis(1,c(0,lags))
abline(0,0,col="gray")
lines(c(0,lags), c(1,val), type="h")
## Draw the approximate 95% confidence interval
abline(h=quantile(iidVal,0.95), col="blue", lty=2)
val
